
import os, sys, json, httpx, base64
from urllib.parse import urlsplit

def _env(k):
    v = os.getenv(k, "") or ""
    return v.strip().strip('"').strip("'").rstrip("/")

def mask(s, keep=4):
    if not s: return "(empty)"
    if len(s) <= keep*2: return s[0] + "‚Ä¶" + s[-1]
    return s[:keep] + "‚Ä¶" + s[-keep:]

SUPABASE_URL = _env("SUPABASE_URL")
ANON = _env("SUPABASE_ANON_KEY")
SRV  = _env("SUPABASE_SERVICE_ROLE_KEY")
API  = SRV or ANON

print("SUPABASE_URL =", SUPABASE_URL)
print("ANON  =", mask(ANON))
print("SRV   =", mask(SRV))
print("Using =", "SERVICE_ROLE" if SRV else "ANON")

def die(msg):
    print("‚ùå", msg); sys.exit(2)

# Basic URL sanity
if not SUPABASE_URL or "your-project-url" in SUPABASE_URL or "<project-ref>" in SUPABASE_URL:
    die("SUPABASE_URL –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä. –í–æ–∑—å–º–∏ —Ä–µ–∞–ª—å–Ω—ã–π URL –∏–∑ Settings ‚Üí API.")
sp = urlsplit(SUPABASE_URL)
if not sp.scheme.startswith("http") or not sp.netloc:
    die(f"SUPABASE_URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {SUPABASE_URL!r}")

# Basic JWT-ish sanity
if not API or not API.startswith("ey"):
    print("‚ö†Ô∏è  –ö–ª—é—á –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ JWT (–æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'ey'). –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —ç—Ç–æ –∫–ª—é—á –∏–∑ Settings ‚Üí API.")
headers = {"apikey": API, "Authorization": f"Bearer {API}"}

def try_req(path):
    url = f"{SUPABASE_URL}{path}"
    try:
        r = httpx.get(url, headers=headers, timeout=15)
        return r
    except Exception as e:
        die(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ {url}: {e}")

# 1) Touch REST root
r = try_req("/rest/v1/")
print("REST /rest/v1 status:", r.status_code)
if r.status_code == 401 and "Invalid API key" in r.text:
    die("Invalid API key ‚Äî –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.")
elif r.status_code in (200, 404):
    print("‚úÖ –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ REST –µ—Å—Ç—å (200/404 –æ–∫).")
else:
    print("‚ÑπÔ∏è –û—Ç–≤–µ—Ç:", r.status_code, r.text[:200])

# 2) Try a minimal table list (should 404, ok) and a bogus table (also ok)
r2 = try_req("/rest/v1/unknown_table?select=*")
print("Unknown table status:", r2.status_code, "(expected 401/404/406 ‚Äî —ç—Ç–æ –æ–∫)")

print("üéâ Healthcheck –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ –∑–¥–µ—Å—å –Ω–µ—Ç ‚ùå ‚Äî –∫–ª—é—á–∏ –∏ URL –≤—ã–≥–ª—è–¥—è—Ç —Ä–∞–±–æ—á–∏–º–∏.")
